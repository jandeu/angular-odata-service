{"version":3,"sources":["angular-odata-service.ts"],"names":["angular","module","provider","routePrefix","namespace","setRoutePrefix","value","setNamespace","$get","$http","buildRequestConfig","config","query","odataRequestParams","p","key","custom","isObject","JSON","stringify","toLowerCase","isDefined","params","extend","buildUrl","entity","actionOrFunctionName","parts","push","entityName","navigationPropertyName","isString","navigationProperty","isNumber","compositeKeyParts","compositeKeyPart","join","service","get","odataQuery","url","requestConfig","getById","getCount","success","resp","Number","patch","data","post","put","delete","action","actionName","function","functionName"],"mappings":"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","file":"angular-odata-service.min.js","sourcesContent":["angular.module(\"angular-odata-service\", [])\r\n    .provider(\"odata\", function (): ng.odata.IODataProvider {\r\n        var provider = {\r\n            routePrefix: \"\",\r\n            namespace: \"\",\r\n            setRoutePrefix: (value: string) => {\r\n                if (!value)\r\n                    value = \"\";\r\n                provider.routePrefix = value;\r\n            },\r\n            setNamespace(value: string) {\r\n                if (!value)\r\n                    value = \"\";\r\n                provider.namespace = value;\r\n            },\r\n            $get: [\"$http\", ($http: ng.IHttpService) => {\r\n\r\n                var buildQuery = (query: ng.odata.IODataQuery) => {\r\n                    if (!query)\r\n                        return null;\r\n                    var params = <any>{};\r\n                    for (var p in query) {\r\n                        if (p === \"custom\") {\r\n                            for (var key in query.custom) {\r\n                                let value = query.custom[key];\r\n                                if (value && value != \"\") {\r\n                                    if (!angular.isObject(value))\r\n                                        params[key] = value;\r\n                                    else\r\n                                        params[key] = JSON.stringify(value);\r\n                                }\r\n                            }\r\n                        } else {\r\n                            let value = query[p];\r\n                            if (value && value != \"\") {\r\n                                params[\"$\" + p.toLowerCase()] = value;\r\n                            }\r\n                        }\r\n                    }\r\n                    return params;\r\n                };\r\n\r\n                var buildRequestConfig = (config: ng.IRequestShortcutConfig, query?: ng.odata.IODataQuery): ng.IRequestShortcutConfig => {\r\n\r\n                    if (!query)\r\n                        return config;\r\n\r\n                    var odataRequestParams = <any>{};\r\n                    for (var p in query) {\r\n                        if (p === \"custom\") {\r\n                            for (var key in query.custom) {\r\n                                let value = query.custom[key];\r\n                                if (value && value != \"\") {\r\n                                    if (!angular.isObject(value))\r\n                                        odataRequestParams[key] = value;\r\n                                    else\r\n                                        odataRequestParams[key] = JSON.stringify(value);\r\n                                }\r\n                            }\r\n                        } else {\r\n                            let value = query[p];\r\n                            if (value && value != \"\") {\r\n                                odataRequestParams[\"$\" + p.toLowerCase()] = value;\r\n                            }\r\n                        }\r\n                    }\r\n                    if (!config) {\r\n                        config = { params: odataRequestParams };\r\n                    } else {\r\n                        if (angular.isDefined(config.params)) {\r\n                            angular.extend(config.params, odataRequestParams);\r\n                        } else {\r\n                            config.params = odataRequestParams;\r\n                        }\r\n                    }\r\n\r\n                    return config;\r\n                };\r\n\r\n                var buildUrl = (entity?: string | ng.odata.IEntity, key?: number | string | ng.odata.ICompositeKey, actionOrFunctionName?: string) => {\r\n                    var parts = [];\r\n                    if (provider.routePrefix && provider.routePrefix != \"\")\r\n                        parts.push(provider.routePrefix);\r\n                    if (entity) {\r\n                        var entityName = \"\";\r\n                        var navigationPropertyName = null;\r\n                        if (angular.isString(entity))\r\n                            entityName = <string>entity;\r\n                        else {\r\n                            entityName = (<ng.odata.IEntity>entity).entity;\r\n                            navigationPropertyName = (<ng.odata.IEntity>entity).navigationProperty;\r\n                        }\r\n\r\n                        if (key) {\r\n                            if (angular.isString(key))\r\n                                parts.push(entityName + \"('\" + key + \"')\");\r\n                            else if (angular.isNumber(key))\r\n                                parts.push(entityName + \"(\" + key + \")\")\r\n                            else {\r\n                                var compositeKeyParts = [];\r\n                                for (var compositeKeyPart in <ng.odata.ICompositeKey>key) {\r\n                                    if (angular.isNumber(key[compositeKeyPart])) {\r\n                                        compositeKeyParts.push(compositeKeyPart + \"=\" + key[compositeKeyPart]);\r\n                                    }\r\n                                    else if (angular.isString(key[compositeKeyPart])) {\r\n                                        compositeKeyParts.push(compositeKeyPart + \"='\" + key[compositeKeyPart] + \"'\");\r\n                                    }\r\n                                }\r\n                                parts.push(entityName + \"(\" + compositeKeyParts.join(\",\") + \")\");\r\n\r\n                            }\r\n                        }\r\n                        else {\r\n                            parts.push(entityName);\r\n                        }\r\n                        if (navigationPropertyName)\r\n                            parts.push(navigationPropertyName);\r\n                    }\r\n                    if (actionOrFunctionName) {\r\n                        parts.push(provider.namespace + \".\" + actionOrFunctionName);\r\n                    }\r\n\r\n                    return parts.join(\"/\");\r\n                };\r\n\r\n\r\n\r\n                var service: ng.odata.IODataService = {\r\n                    get: <T>(entity, odataQuery, config) => {\r\n                        var url = buildUrl(entity);\r\n                        var requestConfig = buildRequestConfig(config, odataQuery);\r\n                        return $http.get(url, requestConfig);\r\n                    },\r\n\r\n                    getById: <T>(entity, key, odataQuery, config) => {\r\n                        var url = buildUrl(entity, key);\r\n                        var requestConfig = buildRequestConfig(config, odataQuery);\r\n                        return $http.get(url, requestConfig);\r\n                    },\r\n                    getCount: (entity, odataQuery,config) => {\r\n                        var url = buildUrl(entity) + \"/$count\";\r\n                        var requestConfig = buildRequestConfig(config, odataQuery);\r\n                        return $http.get<number>(url, requestConfig).success(resp => {\r\n                            return Number(resp);\r\n                        });\r\n                    },\r\n                    patch: <T>(entity, key, data, config) => {\r\n                        var url = buildUrl(entity, key);                        \r\n                        return $http.patch(url, data, config);\r\n                    },\r\n                    post: <T>(entity, key, data, config) => {\r\n                        var url = buildUrl(entity, key);\r\n                        return $http.post(url, data, config);\r\n                    },\r\n                    put: <T>(entity, key, data,config) => {\r\n                        var url = buildUrl(entity, key);\r\n                        return $http.put(url, data, config);\r\n                    },\r\n                    delete: <T>(entity, key, config) => {\r\n                        var url = buildUrl(entity, key);\r\n                        return $http.delete(url, config);\r\n                    },\r\n                    action: <T>(actionName, data, entity, key, config) => {\r\n                        var url = buildUrl(entity, key, actionName);\r\n                        return $http.post(url, data, config);\r\n                    },\r\n                    function: <T>(functionName, entity, key, config) => {\r\n                        var url = buildUrl(entity, key, functionName);\r\n                        return $http.get(url, config);\r\n                    }\r\n\r\n                };\r\n\r\n                return service;\r\n\r\n            }]\r\n        };\r\n\r\n        return provider;\r\n    });\r\n\r\n\r\n\r\n"],"sourceRoot":"/source/"}