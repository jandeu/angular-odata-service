{"version":3,"sources":["angular-odata-service.ts"],"names":["angular","module","provider","routePrefix","namespace","setRoutePrefix","value","setNamespace","$get","$http","buildQuery","query","params","p","key","custom","isObject","JSON","stringify","toLowerCase","buildUrl","entity","actionOrFunctionName","parts","push","entityName","navigationPropertyName","isString","navigationProperty","isNumber","compositeKeyParts","compositeKeyPart","join","service","get","odataQuery","url","getById","getCount","success","resp","Number","patch","data","post","put","delete","action","actionName","function","functionName"],"mappings":"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","file":"angular-odata-service.min.js","sourcesContent":["angular.module(\"angular-odata-service\", [])\r\n    .provider(\"odata\", function (): ng.odata.IODataProvider {\r\n        var provider = {\r\n            routePrefix: \"\",\r\n            namespace: \"\",\r\n            setRoutePrefix: (value: string) => {\r\n                if (!value)\r\n                    value = \"\";\r\n                provider.routePrefix = value;\r\n            },\r\n            setNamespace(value: string) {\r\n                if (!value)\r\n                    value = \"\";\r\n                provider.namespace = value;\r\n            },\r\n            $get: [\"$http\", ($http: ng.IHttpService) => {\r\n\r\n                var buildQuery = (query: ng.odata.IODataQuery) => {\r\n                    if (!query)\r\n                        return null;\r\n                    var params = <any>{};\r\n                    for (var p in query) {\r\n                        if (p === \"custom\") {\r\n                            for (var key in query.custom) {\r\n                                let value = query.custom[key];\r\n                                if (value && value != \"\") {\r\n                                    if (!angular.isObject(value))\r\n                                        params[key] = value;\r\n                                    else\r\n                                        params[key] = JSON.stringify(value);\r\n                                }\r\n                            }\r\n                        } else {\r\n                            let value = query[p];\r\n                            if (value && value != \"\") {\r\n                                params[\"$\" + p.toLowerCase()] = value;\r\n                            }\r\n                        }\r\n                    }\r\n                    return params;\r\n                };\r\n\r\n                var buildUrl = (entity?: string | ng.odata.IEntity, key?: number | string | ng.odata.ICompositeKey, actionOrFunctionName?: string) => {\r\n                    var parts = [];\r\n                    if (provider.routePrefix && provider.routePrefix != \"\")\r\n                        parts.push(provider.routePrefix);\r\n                    if (entity) {\r\n                        var entityName = \"\";\r\n                        var navigationPropertyName = null;\r\n                        if (angular.isString(entity))\r\n                            entityName = <string>entity;\r\n                        else {\r\n                            entityName = (<ng.odata.IEntity>entity).entity;\r\n                            navigationPropertyName = (<ng.odata.IEntity>entity).navigationProperty;\r\n                        }\r\n\r\n                        if (key) {\r\n                            if (angular.isString(key))\r\n                                parts.push(entityName + \"('\" + key + \"')\");\r\n                            else if (angular.isNumber(key))\r\n                                parts.push(entityName + \"(\" + key + \")\")\r\n                            else {\r\n                                var compositeKeyParts = [];\r\n                                for (var compositeKeyPart in <ng.odata.ICompositeKey>key) {\r\n                                    if (angular.isNumber(key[compositeKeyPart])) {\r\n                                        compositeKeyParts.push(compositeKeyPart + \"=\" + key[compositeKeyPart]);\r\n                                    }\r\n                                    else if (angular.isString(key[compositeKeyPart])) {\r\n                                        compositeKeyParts.push(compositeKeyPart + \"='\" + key[compositeKeyPart] + \"'\");\r\n                                    }\r\n                                }\r\n                                parts.push(entityName + \"(\" + compositeKeyParts.join(\",\") + \")\");\r\n\r\n                            }\r\n                        }\r\n                        else {\r\n                            parts.push(entityName);\r\n                        }\r\n                        if (navigationPropertyName)\r\n                            parts.push(navigationPropertyName);\r\n                    }\r\n                    if (actionOrFunctionName) {\r\n                        parts.push(provider.namespace + \".\" + actionOrFunctionName);\r\n                    }\r\n\r\n                    return parts.join(\"/\");\r\n                };\r\n\r\n\r\n                var service: ng.odata.IODataService = {\r\n                    get: <T>(entity, odataQuery) => {\r\n                        var url = buildUrl(entity);\r\n                        return $http.get(url, {\r\n                            params: buildQuery(odataQuery)\r\n                        });\r\n                    },\r\n\r\n                    getById: <T>(entity, key, odataQuery) => {\r\n                        var url = buildUrl(entity, key);\r\n                        return $http.get(url, {\r\n                            params: buildQuery(odataQuery)\r\n                        });\r\n                    },\r\n                    getCount: (entity, odataQuery) => {\r\n                        var url = buildUrl(entity) + \"/$count\";\r\n                        return $http.get<number>(url, {\r\n                            params: buildQuery(odataQuery)\r\n                        }).success(resp => {\r\n                            return Number(resp);\r\n                        });\r\n                    },\r\n                    patch: <T>(entity, key, data) => {\r\n                        var url = buildUrl(entity, key);\r\n                        return $http.patch(url, data);\r\n                    },\r\n                    post: <T>(entity, key, data) => {\r\n                        var url = buildUrl(entity, key);\r\n                        return $http.post(url, data);\r\n                    },\r\n                    put: <T>(entity, key, data) => {\r\n                        var url = buildUrl(entity, key);\r\n                        return $http.put(url, data);\r\n                    },\r\n                    delete: <T>(entity, key) => {\r\n                        var url = buildUrl(entity, key);\r\n                        return $http.delete(url);\r\n                    },\r\n                    action: <T>(actionName, data, entity, key) => {\r\n                        var url = buildUrl(entity, key, actionName);\r\n                        return $http.post(url, data);\r\n                    },\r\n                    function: <T>(functionName, entity, key) => {\r\n                        var url = buildUrl(entity, key, functionName);\r\n                        return $http.get(url);\r\n                    }\r\n\r\n                };\r\n\r\n                return service;\r\n\r\n            }]\r\n        };\r\n\r\n        return provider;\r\n    });\r\n\r\n\r\n\r\n"],"sourceRoot":"/source/"}