{"version":3,"sources":["angular-odata-service.ts"],"names":["angular","module","provider","routePrefix","namespace","setRoutePrefix","value","setNamespace","$get","$http","buildQuery","query","params","select","$select","filter","$filter","expand","isString","$expand","orderBy","$orderby","count","$count","top","$top","skip","$skip","search","$search","custom","key","isObject","JSON","stringify","buildUrl","entity","actionOrFunctionName","parts","push","entityName","navigationPropertyName","navigationProperty","isNumber","compositeKeyParts","compositeKeyPart","join","service","get","odataQuery","url","getById","getCount","success","resp","Number","patch","data","post","put","delete","action","actionName","function","functionName"],"mappings":"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","file":"angular-odata-service.min.js","sourcesContent":["angular.module(\"angular-odata-service\", [])\r\n    .provider(\"odata\", function (): ng.odata.IODataProvider {\r\n        var provider = {\r\n            routePrefix: \"\",\r\n            namespace: \"\",\r\n            setRoutePrefix: (value: string) => {\r\n                if (!value)\r\n                    value = \"\";\r\n                provider.routePrefix = value;\r\n            },\r\n            setNamespace(value: string) {\r\n                if (!value)\r\n                    value = \"\";\r\n                provider.namespace = value;\r\n            },\r\n            $get: [\"$http\", ($http: ng.IHttpService) => {\r\n\r\n                var buildQuery = (query: ng.odata.IODataQuery) => {\r\n                    if (!query)\r\n                        return null;\r\n                    var params = <any>{};\r\n                    if (query.select)\r\n                        params.$select = query.select;\r\n                    if (query.filter)\r\n                        params.$filter = query.filter;\r\n                    if (query.expand) {\r\n                        if (angular.isString(query.expand))\r\n                            params.$expand = query.expand;\r\n\r\n                    }\r\n                    if (query.orderBy)\r\n                        params.$orderby = query.orderBy;\r\n                    if (query.count)\r\n                        params.$count = query.count;\r\n                    if (query.top)\r\n                        params.$top = query.top;\r\n                    if (query.skip)\r\n                        params.$skip = query.skip;\r\n                    if (query.search)\r\n                        params.$search = query.search;\r\n                    if (query.custom) {\r\n                        for (var key in query.custom) {\r\n                            if (!angular.isObject(query.custom[key]))\r\n                                params[key] = query.custom[key];\r\n                            else\r\n                                params[key] = JSON.stringify(query.custom[key]);\r\n                        }\r\n                    }\r\n                    return params;\r\n                };\r\n\r\n                var buildUrl = (entity?: string | ng.odata.IEntity, key?: number | string | ng.odata.ICompositeKey, actionOrFunctionName?: string) => {\r\n                    var parts = [];\r\n                    if (provider.routePrefix && provider.routePrefix != \"\")\r\n                        parts.push(provider.routePrefix);\r\n                    if (entity) {\r\n                        var entityName = \"\";\r\n                        var navigationPropertyName = null;\r\n                        if (angular.isString(entity))\r\n                            entityName = <string>entity;\r\n                        else {\r\n                            entityName = (<ng.odata.IEntity>entity).entity;\r\n                            navigationPropertyName = (<ng.odata.IEntity>entity).navigationProperty;\r\n                        }\r\n\r\n                        if (key) {\r\n                            if (angular.isString(key))\r\n                                parts.push(entityName + \"('\" + key + \"')\");\r\n                            else if (angular.isNumber(key))\r\n                                parts.push(entityName + \"(\" + key + \")\")\r\n                            else {\r\n                                var compositeKeyParts = [];\r\n                                for (var compositeKeyPart in <ng.odata.ICompositeKey>key) {\r\n                                    if (angular.isNumber(key[compositeKeyPart])) {\r\n                                        compositeKeyParts.push(compositeKeyPart + \"=\" + key[compositeKeyPart]);\r\n                                    }\r\n                                    else if (angular.isString(key[compositeKeyPart])) {\r\n                                        compositeKeyParts.push(compositeKeyPart + \"='\" + key[compositeKeyPart] + \"'\");\r\n                                    }\r\n                                }\r\n                                parts.push(entityName + \"(\" + compositeKeyParts.join(\",\") + \")\");\r\n\r\n                            }\r\n                        }\r\n                        else {\r\n                            parts.push(entityName);\r\n                        }\r\n                        if (navigationPropertyName)\r\n                            parts.push(navigationPropertyName);\r\n                    }\r\n                    if (actionOrFunctionName) {\r\n                        parts.push(provider.namespace + \".\" + actionOrFunctionName);\r\n                    }\r\n\r\n                    return parts.join(\"/\");\r\n                };\r\n\r\n\r\n                var service: ng.odata.IODataService = {\r\n                    get: <T>(entity, odataQuery) => {\r\n                        var url = buildUrl(entity);\r\n                        return $http.get(url, {\r\n                            params: buildQuery(odataQuery)\r\n                        });\r\n                    },\r\n\r\n                    getById: <T>(entity, key, odataQuery) => {\r\n                        var url = buildUrl(entity, key);\r\n                        return $http.get(url, {\r\n                            params: buildQuery(odataQuery)\r\n                        });\r\n                    },\r\n                    getCount: (entity, odataQuery) => {\r\n                        var url = buildUrl(entity) + \"/$count\";\r\n                        return $http.get<number>(url, {\r\n                            params: buildQuery(odataQuery)\r\n                        }).success(resp => {\r\n                            return Number(resp);\r\n                        });\r\n                    },\r\n                    patch: <T>(entity, key, data) => {\r\n                        var url = buildUrl(entity, key);\r\n                        return $http.patch(url, data);\r\n                    },\r\n                    post: <T>(entity, key, data) => {\r\n                        var url = buildUrl(entity, key);\r\n                        return $http.post(url, data);\r\n                    },\r\n                    put: <T>(entity, key, data) => {\r\n                        var url = buildUrl(entity, key);\r\n                        return $http.put(url, data);\r\n                    },\r\n                    delete: <T>(entity, key) => {\r\n                        var url = buildUrl(entity, key);\r\n                        return $http.delete(url);\r\n                    },\r\n                    action: <T>(actionName, data, entity, key) => {\r\n                        var url = buildUrl(entity, key, actionName);\r\n                        return $http.post(url, data);\r\n                    },\r\n                    function: <T>(functionName, entity, key) => {\r\n                        var url = buildUrl(entity, key, functionName);\r\n                        return $http.get(url);\r\n                    }\r\n\r\n                };\r\n\r\n                return service;\r\n\r\n            }]\r\n        };\r\n\r\n        return provider;\r\n    });\r\n\r\n\r\n\r\n"],"sourceRoot":"/source/"}