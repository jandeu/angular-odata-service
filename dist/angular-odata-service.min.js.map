{"version":3,"sources":["angular-odata-service.ts"],"names":["angular","module","provider","routePrefix","namespace","setRoutePrefix","value","setNamespace","$get","$http","buildQuery","query","params","p","key","custom","isObject","JSON","stringify","buildUrl","entity","actionOrFunctionName","parts","push","entityName","navigationPropertyName","isString","navigationProperty","isNumber","compositeKeyParts","compositeKeyPart","join","service","get","odataQuery","url","getById","getCount","success","resp","Number","patch","data","post","put","delete","action","actionName","function","functionName"],"mappings":"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","file":"angular-odata-service.min.js","sourcesContent":["angular.module(\"angular-odata-service\", [])\r\n    .provider(\"odata\", function (): ng.odata.IODataProvider {\r\n        var provider = {\r\n            routePrefix: \"\",\r\n            namespace: \"\",\r\n            setRoutePrefix: (value: string) => {\r\n                if (!value)\r\n                    value = \"\";\r\n                provider.routePrefix = value;\r\n            },\r\n            setNamespace(value: string) {\r\n                if (!value)\r\n                    value = \"\";\r\n                provider.namespace = value;\r\n            },\r\n            $get: [\"$http\", ($http: ng.IHttpService) => {\r\n\r\n                var buildQuery = (query: ng.odata.IODataQuery) => {\r\n                    if (!query)\r\n                        return null;\r\n                    var params = <any>{};\r\n                    for (var p in query) {\r\n                        if (p === \"custom\") {\r\n                            for (var key in query.custom) {\r\n                                if (!angular.isObject(query.custom[key]))\r\n                                    params[key] = query.custom[key];\r\n                                else\r\n                                    params[key] = JSON.stringify(query.custom[key]);\r\n                            }\r\n                        } else {\r\n                            params[\"$\" + p] = query[p];\r\n                        }\r\n                    }\r\n                    return params;\r\n                };\r\n\r\n                var buildUrl = (entity?: string | ng.odata.IEntity, key?: number | string | ng.odata.ICompositeKey, actionOrFunctionName?: string) => {\r\n                    var parts = [];\r\n                    if (provider.routePrefix && provider.routePrefix != \"\")\r\n                        parts.push(provider.routePrefix);\r\n                    if (entity) {\r\n                        var entityName = \"\";\r\n                        var navigationPropertyName = null;\r\n                        if (angular.isString(entity))\r\n                            entityName = <string>entity;\r\n                        else {\r\n                            entityName = (<ng.odata.IEntity>entity).entity;\r\n                            navigationPropertyName = (<ng.odata.IEntity>entity).navigationProperty;\r\n                        }\r\n\r\n                        if (key) {\r\n                            if (angular.isString(key))\r\n                                parts.push(entityName + \"('\" + key + \"')\");\r\n                            else if (angular.isNumber(key))\r\n                                parts.push(entityName + \"(\" + key + \")\")\r\n                            else {\r\n                                var compositeKeyParts = [];\r\n                                for (var compositeKeyPart in <ng.odata.ICompositeKey>key) {\r\n                                    if (angular.isNumber(key[compositeKeyPart])) {\r\n                                        compositeKeyParts.push(compositeKeyPart + \"=\" + key[compositeKeyPart]);\r\n                                    }\r\n                                    else if (angular.isString(key[compositeKeyPart])) {\r\n                                        compositeKeyParts.push(compositeKeyPart + \"='\" + key[compositeKeyPart] + \"'\");\r\n                                    }\r\n                                }\r\n                                parts.push(entityName + \"(\" + compositeKeyParts.join(\",\") + \")\");\r\n\r\n                            }\r\n                        }\r\n                        else {\r\n                            parts.push(entityName);\r\n                        }\r\n                        if (navigationPropertyName)\r\n                            parts.push(navigationPropertyName);\r\n                    }\r\n                    if (actionOrFunctionName) {\r\n                        parts.push(provider.namespace + \".\" + actionOrFunctionName);\r\n                    }\r\n\r\n                    return parts.join(\"/\");\r\n                };\r\n\r\n\r\n                var service: ng.odata.IODataService = {\r\n                    get: <T>(entity, odataQuery) => {\r\n                        var url = buildUrl(entity);\r\n                        return $http.get(url, {\r\n                            params: buildQuery(odataQuery)\r\n                        });\r\n                    },\r\n\r\n                    getById: <T>(entity, key, odataQuery) => {\r\n                        var url = buildUrl(entity, key);\r\n                        return $http.get(url, {\r\n                            params: buildQuery(odataQuery)\r\n                        });\r\n                    },\r\n                    getCount: (entity, odataQuery) => {\r\n                        var url = buildUrl(entity) + \"/$count\";\r\n                        return $http.get<number>(url, {\r\n                            params: buildQuery(odataQuery)\r\n                        }).success(resp => {\r\n                            return Number(resp);\r\n                        });\r\n                    },\r\n                    patch: <T>(entity, key, data) => {\r\n                        var url = buildUrl(entity, key);\r\n                        return $http.patch(url, data);\r\n                    },\r\n                    post: <T>(entity, key, data) => {\r\n                        var url = buildUrl(entity, key);\r\n                        return $http.post(url, data);\r\n                    },\r\n                    put: <T>(entity, key, data) => {\r\n                        var url = buildUrl(entity, key);\r\n                        return $http.put(url, data);\r\n                    },\r\n                    delete: <T>(entity, key) => {\r\n                        var url = buildUrl(entity, key);\r\n                        return $http.delete(url);\r\n                    },\r\n                    action: <T>(actionName, data, entity, key) => {\r\n                        var url = buildUrl(entity, key, actionName);\r\n                        return $http.post(url, data);\r\n                    },\r\n                    function: <T>(functionName, entity, key) => {\r\n                        var url = buildUrl(entity, key, functionName);\r\n                        return $http.get(url);\r\n                    }\r\n\r\n                };\r\n\r\n                return service;\r\n\r\n            }]\r\n        };\r\n\r\n        return provider;\r\n    });\r\n\r\n\r\n\r\n"],"sourceRoot":"/source/"}